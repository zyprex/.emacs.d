;;; i-abb.el -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*-
;;; Commentary:
;;    A Basic Boilerplate elisp implement, lite replacement of abbrev
;;; Code:

(defvar abb-table
  '(
    ((lisp-interaction-mode emacs-lisp-mode inferior-emacs-lisp-mode)
     (("fu" "(defun " "()\n)")
      ("m" "(message " ")")
      ("s" "(setq " ")")
      ("k" "(kbd \"" "\")")
      ("i" "(interactive)" "")
      ("l" "(lambda (" "))")))
    ((lisp-interaction-mode)
     (("date" (lambda () (insert (format-time-string "%A, %d %B %Y"))))
      ("time" (lambda () (insert (format-time-string "%H:%M:%S"))))
      ("me" "(macroexpand-1 '(" "))")))
    ((markdown-mode)
     (("i" "_" "_" t)
      ("b" "**" "**" t)
      ("s" "~~" "~~" t)
      ("ib" "___" "___" t)
      ("bi" "***" "***" t)
      ("c" "`" "`" t)
      ("k" "<kbd>" "</kbd>" t)
      ("m" "<mark>" "</mark>" t)
      ("sub" "<sub>" "</sub>" t)
      ("sup" "<sup>" "</sup>" t)
      ("t" "|" "    |    |\n|:---|:---|\n|    |    |" t)
      ("l" "[](" ")" t)
      ("img" "![](" ")" t)
      ("rl" "[][" "]" t)
      ("ri" "![][" "]" t)
      ("fn" "[^" "]:" t)
      ("hr" "-----\n")
      ("cb" "```" "\n```" t)
      ("email" "<" "@.com>" t)))
    ((org-mode)
     (("i" "/" "/")
      ("b" "*" "*")
      ("c" "~" "~")
      ("C" "=" "=")
      ("s" "+" "+")
      ("fn" "[[]][[" "]]")
      ("img" "#+CAPTION:\n#+NAME:\n[[" "]]")
      ("fn" "[fn:" "] ")
      ("hr" "-----\n")
      ("t" "|" "    |    |")
      ("q" "#+BEGIN_QUOTE\n" "\n#+END_QUOTE")
      ("src" "#+BEGIN_SRC " "\n#+END_SRC")
      ("center" "#+BEGIN_CENTER\n" "\n#+END_CENTER")
      ("example" "#+BEGIN_EXAMPLE\n" "\n#+END_EXAMPLE")))
    ((c-mode cc-mode)
     (("pr" "printf(\"" "\");")
      ("ma" "int main(int argc, char* argv[]) {\n" "\nreturn 0;\n}"))
      ("de" "#define " "")
      ("ty" "typedef " "")
      ("in" "#include <" ">")
      ("inc" "#include \"" "\"")
      ("so" "sizeof(" ")"))
    ((java-mode)
     (("pr" "System.out.println(" ");")
      ("cl" "class " "{\n}")
      ("tr" "try {\n" "\n} catch (Exception e) {\ne.printStackTrace();\n}")
      ("ma" "public static void main(String[] args){\n" "\n}")))
    ((c-mode cc-mode js-mode web-mode java-mode)
     (("do" "do {\n" "\n} while(0);")
      ("wh" "while (" ") {\n}")
      ("fo" "for (" ") {\n}")
      ("if" "if (" ") {\n}")
      ("ef" "else if (" ") {\n}")
      ("el" "else {\n" "\n}")
      ("sw" "switch (" ") {\n}")
      ("ca" "case " ":\nbreak;")
      ("?" "(" ") ? : ;")
      ("re" "return" ";")))
     ((c-mode cc-mode java-mode)
      (("fu" "" "() {\n}")))
     ((js-mode web-mode)
      (("fu" "function " "() {\n}")
       ("co" "console.log(" ");")
       ("af" "(" ") => {\n}")))
    )
  "Text boilerpalte list, Each item's structure is
(([major-mode1] [major-mode2] ...)
  ([id2] [pre] [post])
  ([id2] [pre] [post] [no indent])
  ([id3] [function])
  ...))")


(defun abb-print-templates ()
  (interactive)
  (with-output-to-temp-buffer "*abb*"
    (dolist (i (abb-list-templates))
      (princ (format "%s\t\t-->\t\t%s%s\n"
                     (car i)
                     (car (cdr i))
                     (car (cdr (cdr i))))))
    (princ "\n'abb-table'")))

(defun abb-list-templates ()
  (let ((ret '()))
    (dolist (i abb-table ret)
      (when (memq major-mode (car i))
        (setq ret (append ret (car (cdr i))))))))

(defun abb-get-template (str)
  (catch 'e
    (dolist (i (abb-list-templates))
      (let ((id (car i))
            (body (cdr i)))
        (when (string-equal str id)
          (throw 'e body))))))

(defun abb-get-trigger-keyword ()
  (let ((start (1- (point)))
        (stop '(9 10 32)))
    (while (and (not (member (char-after start) stop))
                (> start (line-beginning-position)))
      (setq start (1- start)))
    (when (member (char-after start) stop)
      (setq start (1+ start)))
    (cons (buffer-substring-no-properties start (point)) start)))

(defun abb-expand ()
  (let* ((id (abb-get-trigger-keyword))
         (beg (cdr id))
         (s (abb-get-template (car id)))
         (last-end-point (point)))
    (when s
      (delete-region beg (point))
      (cond
       ((stringp (car s))
        (insert (nth 0 s) (nth 1 s))
        (setq last-end-point (point))
        (goto-char (+ beg (length (nth 0 s))))
        (unless (nth 2 s)
          (indent-region beg last-end-point)
          (indent-for-tab-command)))
       ((functionp (car s))
        (funcall (car s))))
      t)))

;;;###autoload
(defun abb-map-ctrl-e ()
  "Use Ctrl+E expand abb table"
  (interactive)
  (unless (abb-expand)
    (move-end-of-line 1)))

(global-set-key (kbd "C-e") 'abb-map-ctrl-e)
(with-eval-after-load "evil"
  (evil-define-key 'insert 'global (kbd "C-e") 'abb-map-ctrl-e))

(provide 'i-abb)

;;; i-abb.el ends here
