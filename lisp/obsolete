;;; obsolete -*- mode: emacs-lisp; coding: utf-8; lexical-binding: t -*-
;;; Commentary:
;;    obsolete stuffs for emacs which were dumped here.
;;
;;; Code:

;;
;; configure when emacs-version < 28.1
;;
  ;; (setq-default completion-styles '(initials flex))
  ;; (icomplete-mode)
  ;; (define-key minibuffer-local-map (kbd "C-c i") 'icomplete-mode)
  ;; (define-key-list icomplete-minibuffer-map
  ;;   '(("C-c i" icomplete-mode)
  ;;     ([right] icomplete-forward-completions)
  ;;     ([left]  icomplete-backward-completions)
  ;;     ("C-n"   icomplete-forward-completions)
  ;;     ("C-p"   icomplete-backward-completions)
  ;;     ("C-s"   icomplete-forward-completions)
  ;;     ("C-r"   icomplete-backward-completions)
  ;;     ("C-j"   icomplete-force-complete)
  ;;     ("C-m"   icomplete-force-complete-and-exit)))
  ;; (setq icomplete-hide-common-prefix nil
  ;;       icomplete-show-matches-on-no-input nil
  ;;       icomplete-tidy-shadowed-file-names t
  ;;       icomplete-compute-delay 0.3
  ;;       icomplete-delay-completions-threshold 20000
  ;;       icomplete-max-delay-chars 1
  ;;       icomplete-prospects-height 1
  ;;       icomplete-in-buffer t
  ;;       icomplete-separator " ")
  ;; ;; interactively do things with buffers files tags
  ;; (ido-mode)
  ;; (define-key-list ido-common-completion-map
  ;;   '(("C-n" ido-next-match) ("C-p" ido-prev-match)))
  ;; (setq ido-everywhere t
  ;;       ido-enable-flex-matching t
  ;;       ido-enable-regexp t
  ;;       ido-case-fold nil
  ;;       ido-completion-buffer-all-completions t
  ;;       ido-enter-matching-directory t
  ;;       ido-max-dir-file-cache 500
  ;;       ido-max-prospects 20
  ;;       ido-max-window-height 1
  ;;       ido-decorations '("" "" " " " ···" "[" "]"
  ;;                         " [No match]" " [Matched]"
  ;;                         " [Not readable]" " [Too big]" " [Confirm]")
  ;;       ido-use-virtual-buffers t ;; virtual buffer from recentf-list and bookmark
  ;;       ido-auto-merge-delay-time 5)

;; (defun ido-recentf-open ()
;;   ;; because of `ido-use-virtual-buffers', this function becomes useless
;;   "Use `ido-completing-read' to find a recent file"
;;   (interactive)
;;   (when recentf-list
;;     (find-file-existing (ido-completing-read "Find recentf: " recentf-list))))

;; (defun read-n-char (n)
;;   "Read n chars"
;;   (let ((str "") (ch "") (i 0))
;;     (while (< i n)
;;       (setq ch (read-char
;;                 (concat
;;                  (propertize (format "Read char(%d/%d): " i n)
;;                              'face '(minibuffer-prompt default))
;;                  str)))
;;       (setq str (concat str (char-to-string ch)))
;;       (setq i (1+ i)))
;;       str))

;; (defun search-n-char-forward (arg)
;;   "Search n chars forward"
;;   (interactive "P")
;;   (let ((search-str
;;          (read-n-char
;;           (if current-prefix-arg
;;               (if (integer-or-marker-p current-prefix-arg)
;;                   current-prefix-arg
;;                 (car current-prefix-arg))
;;             1))))
;;     (setq-local search-n-string search-str)
;;     (search-forward search-str)))

;; (defun search-n-char-backward (arg)
;;   "Search n chars backward"
;;   (interactive "P")
;;   (let ((search-str
;;          (read-n-char
;;           (if current-prefix-arg
;;               (if (integer-or-marker-p current-prefix-arg)
;;                   current-prefix-arg
;;                 (car current-prefix-arg))
;;             1))))
;;     (setq-local search-n-string search-str)
;;     (search-backward search-str)))

;; (defun search-n-char-forward-repeat ()
;;   "Repeat last `search-n-char-forward'"
;;   (interactive)
;;   (search-forward search-n-string))

;; (defun search-n-char-backward-repeat ()
;;   "Repeat last `search-n-char-backward'"
;;   (interactive)
;;   (search-backward search-n-string))

;; https://www.emacswiki.org/emacs/IncrementNumber
;; (defun change-number-at-point (change increment)
;;   (let ((number (number-at-point))
;;         (point (point)))
;;     (when number
;;       (progn
;;         (forward-word)
;;         (search-backward (number-to-string number))
;;         (replace-match (number-to-string (funcall change number increment)))
;;         (goto-char point)))))

;; (defun increment-number-at-point (&optional increment)
;;   "Increment number at point like vim's C-a"
;;   (interactive "p")
;;   (change-number-at-point '+ (or increment 1)))

;; (defun decrement-number-at-point (&optional increment)
;;   "Decrement number at point like vim's C-x"
;;   (interactive "p")
;;   (change-number-at-point '- (or increment 1)))


; (defun middle-column (&optional arg)
;;   "Go to middle of column"
;;   (interactive "P")
;;   (let* ((begin (line-beginning-position))
;;          (end (line-end-position))
;;          (middle (/ (+ end begin) 2)))
;;     (goto-char middle))
;;   (forward-char arg))

;; (defun isearch-window-forward ()
;;   ;; Origin from https://stackoverflow.com/questions/11569635/isearch-occur-visible-area-in-emacs/11569806#11569806
;;   "Interactive search, limited to the visible portion of the buffer."
;;   (interactive)
;;   (save-restriction
;;     (narrow-to-region (window-start) (window-end))
;;     (isearch-forward)))

;; (defun isearch-window-backward ()
;;   (interactive)
;;   (save-restriction
;;     (narrow-to-region (window-start) (window-end))
;;     (isearch-backward)))



;;
;; rabbit jump
;;

;; (defun rabbit-jump-forward ()
;;   (interactive)
;;   (setq-local rabbit-jump-char (rabbit-jump--read-char "forward"))
;;   (rabbit-jump rabbit-jump-char (point) (window-end))
;;   (rabbit-jump--transient-map 'rabbit-jump-repeat-forward))

;; (defun rabbit-jump-backward ()
;;   (interactive)
;;   (setq-local rabbit-jump-char (rabbit-jump--read-char "backward"))
;;   (rabbit-jump rabbit-jump-char (point) (window-start))
;;   (rabbit-jump--transient-map 'rabbit-jump-repeat-backward))

;; (defun rabbit-jump-repeat-forward ()
;;   (interactive)
;;   (rabbit-jump rabbit-jump-char (point) (window-end))
;;   (rabbit-jump--transient-map 'rabbit-jump-repeat-forward))

;; (defun rabbit-jump-repeat-backward ()
;;   (interactive)
;;   (rabbit-jump rabbit-jump-char (point) (window-start))
;;   (rabbit-jump--transient-map 'rabbit-jump-repeat-backward))

;; (defun rabbit-jump-top ()
;;   (interactive)
;;   (setq-local rabbit-jump-char (rabbit-jump--read-char "top"))
;;   (rabbit-jump rabbit-jump-char (window-start) (window-end))
;;   (rabbit-jump--transient-map 'rabbit-jump-repeat-forward))

;; (defun rabbit-jump-bot ()
;;   (interactive)
;;   (setq-local rabbit-jump-char (rabbit-jump--read-char "bottom"))
;;   (rabbit-jump rabbit-jump-char (window-end) (window-start))
;;   (rabbit-jump--transient-map 'rabbit-jump-repeat-backward))

;; (defmacro rabbit-jump--transient-map (fn)
;;   `(set-transient-map
;;    (let ((kmap (make-sparse-keymap)))
;;      (define-key kmap (kbd (char-to-string rabbit-jump-char)) ,fn)
;;      kmap)))

;; (defun alphabet-p (char-num)
;;   "check ascii char is a-z or A-Z"
;;   (or (and (> char-num 96) (< char-num 123))
;;       (and (> char-num 64) (< char-num 91))))
;;
;; (defun rabbit-jump--read-char (prompt-str)
;;   (read-char
;;    (concat (propertize (format "rabbit jump %s" prompt-str)
;;                        'face '(minibuffer-prompt default)))))

;; (defun rabbit-jump (ch start-position end-position)
;;   "jump to line, in first CHAR between two position"
;;   (let ((start start-position)
;;         (end end-position)
;;         (table (make-vector
;;                 (* 2 (count-screen-lines (window-start) (window-end))) 0))
;;         (idx 0)
;;         (cur 0)
;;         (lend 1))
;;     (if (> start end)
;;         (setq start end-position end start-position rev 1)
;;       (setq rev nil))
;;     (setq end (1- end))
;;     (while (and (< start end) (char-after start))
;;       (progn
;;         (setq cur (char-after start))
;;         ;; a char in alphabet, not in current line had over line end
;;         (if (and (alphabet-p cur) (not (= start (point))) (= lend 1))
;;             (progn
;;               (aset table idx cur)
;;               (aset table (1+ idx) start)
;;               (setq lend 0)
;;               (setq idx (+ 2 idx))))
;;         ;; over line end
;;         (if (= cur 10) (setq lend 1))
;;         (setq start (1+ start))))
;;     (dotimes (v (/ (length table) 2))
;;       ;; c - current char code, i - the char's position
;;       (let ((c 0) (i 0))
;;         (if (eq rev 1)
;;             (setq c (aref table (* 2 v))
;;                   i (1+ (* 2 v)))
;;           (setq c (aref table (- (length table) (* 2 v) 2))
;;                 i (1+ (- (length table) (* 2 v) 2))))
;;         (if (eq c ch)
;;             (goto-char (aref table i)))))))

;; (with-eval-after-load 'calendar
;;   (setq
;;    calendar-chinese-celestial-stem
;;    ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"]
;;    calendar-chinese-terrestrial-branch
;;    ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"]
;;    calendar-chinese-all-holidays-flag t
;;    ;; calendar-location-name ""
;;    calendar-mark-holidays-flag t
;;    calendar-mark-diary-entries-flag t
;;    calendar-view-holidays-initially-flag t)
;;   ;; p C
;;   (add-hook 'calendar-today-visible-hook 'calendar-mark-today))

;; (defun ido-find-tag ()
;;   "Find a tag using ido"
;;   (interactive)
;;   (tags-completion-table)
;;   (let (tags-names)
;;     (mapc (lambda (x)
;; 	    (unless (integerp x)
;; 	      (push (prin1-to-string x t) tags-names)))
;; 	  tags-completion-table)
;;     (xref-find-definitions (ido-completing-read "TAGS:" tags-names))))

;; (defun exex-cmd ()
;;   "Call `execute-extended-command' the default way."
;;   (interactive)
;;   (let ((completion-styles '(basic partial-completion emacs22)))
;;     (call-interactively 'execute-extended-command)))

;; Local Variables:
;; no-byte-compile: t
;; End:

;;; obsolete ends here
